import unittestfrom shipsSet import ShipsSet, is_on_fieldfrom game import load_filefrom players import Player, Computerfrom settings import *class ShipSetTests(unittest.TestCase):    def test_is_on_field(self):        self.assertFalse(is_on_field((-1, -1)))        self.assertTrue(is_on_field((10, 9)))        self.assertFalse(is_on_field((0, 0)))    def test_ShipsSet_init(self):        ship_set = ShipsSet()        self.assertEqual(100, len(ship_set.available_cells))        self.assertEqual({}, ship_set.ships_placed)        self.assertEqual([], ship_set.ships)        self.assertEqual(None, ship_set.ships_copy)    def test_choose_started_cell(self):        ship_set = ShipsSet()        self.assertEqual(len(ship_set.choose_started_cell()), 3)        self.assertIn(ship_set.choose_started_cell()[0],                      ship_set.available_cells)        result = ship_set.choose_started_cell()[1]        self.assertTrue(result == 1 or result == 0)        result = ship_set.choose_started_cell()[2]        self.assertTrue(result == -1 or result == 1)    def test_refresh_available_cells(self):        ship_set = ShipsSet()        ship_set.refresh_available_cells([(4, 5), (4, 6), (4, 7)])        self.assertEqual(85, len(ship_set.available_cells))        ship_set.refresh_available_cells([(6, 5)])        self.assertEqual(79, len(ship_set.available_cells))        ship_set.refresh_available_cells([(1, 1), (2, 1), (3, 1), (4, 1)])        self.assertEqual(69, len(ship_set.available_cells))class PlayersTest(unittest.TestCase):    def test_shoot(self):        player = Player()        computer = Computer()        computer.data_ships.ships.append([(1, 2), (1, 3)])        computer.dead_ships_length = {2: 0}        self.assertTrue(player.shoot(computer, (1, 2))[3])        self.assertFalse(player.shoot(computer, (1, 5))[3])        self.assertTrue(player.shoot(computer, (1, 3))[3])        self.assertEqual(1, computer.dead_ships_length[2])    def test_get_cell(self):        self.assertEqual((1, 1),                         Player.get_cell((left_margin, top_margin + 2)))        self.assertEqual((1, 10),                         Player.get_cell(                             (left_margin, top_margin + 9 * block_size)))        self.assertEqual((2, 1),                         Computer.get_cell(                             (left_margin + 16 * block_size, top_margin + 2)))class GameTest(unittest.TestCase):    def test_load_file(self):        result = load_file()        self.assertEqual({1: 4, 2: 3, 3: 2, 4: 1}, result)if __name__ == '__main__':    unittest.main()